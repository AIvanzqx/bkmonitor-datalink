package redis

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Filter) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Filter, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Filter) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteString(zb0005)
		if err != nil {
			err = msgp.WrapError(err, zb0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Filter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		o = msgp.AppendString(o, zb0005)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Filter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Filter, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 string
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Filter) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004) + msgp.StringPrefixSize + len(zb0005)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Space) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *TsDB
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(TsDB)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Space) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Space) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Space) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *TsDB
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(TsDB)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Space) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TsDB) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "TableID":
			z.TableID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "Field":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Field")
				return
			}
			if cap(z.Field) >= int(zb0002) {
				z.Field = (z.Field)[:zb0002]
			} else {
				z.Field = make([]string, zb0002)
			}
			for za0001 := range z.Field {
				z.Field[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Field", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BkDataID":
			z.BkDataID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BkDataID")
				return
			}
		case "Filters":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0003) {
				z.Filters = (z.Filters)[:zb0003]
			} else {
				z.Filters = make([]Filter, zb0003)
			}
			for za0002 := range z.Filters {
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0002)
					return
				}
				if z.Filters[za0002] == nil {
					z.Filters[za0002] = make(Filter, zb0004)
				} else if len(z.Filters[za0002]) > 0 {
					for key := range z.Filters[za0002] {
						delete(z.Filters[za0002], key)
					}
				}
				for zb0004 > 0 {
					zb0004--
					var za0003 string
					var za0004 string
					za0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0002)
						return
					}
					za0004, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0002, za0003)
						return
					}
					z.Filters[za0002][za0003] = za0004
				}
			}
		case "SegmentedEnable":
			z.SegmentedEnable, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "SegmentedEnable")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TsDB) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Type"
	err = en.Append(0x87, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableID)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "Field"
	err = en.Append(0xa5, 0x46, 0x69, 0x65, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Field)))
	if err != nil {
		err = msgp.WrapError(err, "Field")
		return
	}
	for za0001 := range z.Field {
		err = en.WriteString(z.Field[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Field", za0001)
			return
		}
	}
	// write "MeasurementType"
	err = en.Append(0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MeasurementType)
	if err != nil {
		err = msgp.WrapError(err, "MeasurementType")
		return
	}
	// write "BkDataID"
	err = en.Append(0xa8, 0x42, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BkDataID)
	if err != nil {
		err = msgp.WrapError(err, "BkDataID")
		return
	}
	// write "Filters"
	err = en.Append(0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Filters)))
	if err != nil {
		err = msgp.WrapError(err, "Filters")
		return
	}
	for za0002 := range z.Filters {
		err = en.WriteMapHeader(uint32(len(z.Filters[za0002])))
		if err != nil {
			err = msgp.WrapError(err, "Filters", za0002)
			return
		}
		for za0003, za0004 := range z.Filters[za0002] {
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0002)
				return
			}
			err = en.WriteString(za0004)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0002, za0003)
				return
			}
		}
	}
	// write "SegmentedEnable"
	err = en.Append(0xaf, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.SegmentedEnable)
	if err != nil {
		err = msgp.WrapError(err, "SegmentedEnable")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TsDB) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Type"
	o = append(o, 0x87, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, z.TableID)
	// string "Field"
	o = append(o, 0xa5, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Field)))
	for za0001 := range z.Field {
		o = msgp.AppendString(o, z.Field[za0001])
	}
	// string "MeasurementType"
	o = append(o, 0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MeasurementType)
	// string "BkDataID"
	o = append(o, 0xa8, 0x42, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44)
	o = msgp.AppendString(o, z.BkDataID)
	// string "Filters"
	o = append(o, 0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Filters)))
	for za0002 := range z.Filters {
		o = msgp.AppendMapHeader(o, uint32(len(z.Filters[za0002])))
		for za0003, za0004 := range z.Filters[za0002] {
			o = msgp.AppendString(o, za0003)
			o = msgp.AppendString(o, za0004)
		}
	}
	// string "SegmentedEnable"
	o = append(o, 0xaf, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.SegmentedEnable)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TsDB) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "TableID":
			z.TableID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "Field":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Field")
				return
			}
			if cap(z.Field) >= int(zb0002) {
				z.Field = (z.Field)[:zb0002]
			} else {
				z.Field = make([]string, zb0002)
			}
			for za0001 := range z.Field {
				z.Field[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Field", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BkDataID":
			z.BkDataID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BkDataID")
				return
			}
		case "Filters":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0003) {
				z.Filters = (z.Filters)[:zb0003]
			} else {
				z.Filters = make([]Filter, zb0003)
			}
			for za0002 := range z.Filters {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0002)
					return
				}
				if z.Filters[za0002] == nil {
					z.Filters[za0002] = make(Filter, zb0004)
				} else if len(z.Filters[za0002]) > 0 {
					for key := range z.Filters[za0002] {
						delete(z.Filters[za0002], key)
					}
				}
				for zb0004 > 0 {
					var za0003 string
					var za0004 string
					zb0004--
					za0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0002)
						return
					}
					za0004, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0002, za0003)
						return
					}
					z.Filters[za0002][za0003] = za0004
				}
			}
		case "SegmentedEnable":
			z.SegmentedEnable, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SegmentedEnable")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TsDB) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.StringPrefixSize + len(z.TableID) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Field {
		s += msgp.StringPrefixSize + len(z.Field[za0001])
	}
	s += 16 + msgp.StringPrefixSize + len(z.MeasurementType) + 9 + msgp.StringPrefixSize + len(z.BkDataID) + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Filters {
		s += msgp.MapHeaderSize
		if z.Filters[za0002] != nil {
			for za0003, za0004 := range z.Filters[za0002] {
				_ = za0004
				s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
			}
		}
	}
	s += 16 + msgp.BoolSize
	return
}
