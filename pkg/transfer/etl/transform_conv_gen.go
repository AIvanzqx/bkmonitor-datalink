// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package etl

import (
	"time"

	conv "github.com/cstockton/go-conv"
)

// TransformBool : convert value to Bool, return default value when value is nil
func TransformBool(value interface{}) (interface{}, error) {
	if value == nil {
		var result bool
		return result, nil
	}
	result, err := conv.DefaultConv.Bool(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoBool : convert value to Bool auto
func TransformAutoBool(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Bool(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilBool : convert value to Bool, return error when value is nil
func TransformNotNilBool(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Bool(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilBool : convert value to Bool, return nil when value is nil
func TransformNilBool(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Bool(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformDuration : convert value to Duration, return default value when value is nil
func TransformDuration(value interface{}) (interface{}, error) {
	if value == nil {
		var result time.Duration
		return result, nil
	}
	result, err := conv.DefaultConv.Duration(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoDuration : convert value to Duration auto
func TransformAutoDuration(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Duration(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilDuration : convert value to Duration, return error when value is nil
func TransformNotNilDuration(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Duration(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilDuration : convert value to Duration, return nil when value is nil
func TransformNilDuration(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Duration(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformString : convert value to String, return default value when value is nil
func TransformString(value interface{}) (interface{}, error) {
	if value == nil {
		var result string
		return result, nil
	}
	result, err := conv.DefaultConv.String(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoString : convert value to String auto
func TransformAutoString(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.String(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilString : convert value to String, return error when value is nil
func TransformNotNilString(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.String(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilString : convert value to String, return nil when value is nil
func TransformNilString(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.String(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformTime : convert value to Time, return default value when value is nil
func TransformTime(value interface{}) (interface{}, error) {
	if value == nil {
		var result time.Time
		return result, nil
	}
	result, err := conv.DefaultConv.Time(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoTime : convert value to Time auto
func TransformAutoTime(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Time(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilTime : convert value to Time, return error when value is nil
func TransformNotNilTime(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Time(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilTime : convert value to Time, return nil when value is nil
func TransformNilTime(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Time(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformFloat32 : convert value to Float32, return default value when value is nil
func TransformFloat32(value interface{}) (interface{}, error) {
	if value == nil {
		var result float32
		return result, nil
	}
	result, err := conv.DefaultConv.Float32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoFloat32 : convert value to Float32 auto
func TransformAutoFloat32(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Float32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilFloat32 : convert value to Float32, return error when value is nil
func TransformNotNilFloat32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Float32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilFloat32 : convert value to Float32, return nil when value is nil
func TransformNilFloat32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Float32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformFloat64 : convert value to Float64, return default value when value is nil
func TransformFloat64(value interface{}) (interface{}, error) {
	if value == nil {
		var result float64
		return result, nil
	}
	result, err := conv.DefaultConv.Float64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoFloat64 : convert value to Float64 auto
func TransformAutoFloat64(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Float64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilFloat64 : convert value to Float64, return error when value is nil
func TransformNotNilFloat64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Float64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilFloat64 : convert value to Float64, return nil when value is nil
func TransformNilFloat64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Float64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformInt : convert value to Int, return default value when value is nil
func TransformInt(value interface{}) (interface{}, error) {
	if value == nil {
		var result int
		return result, nil
	}
	result, err := conv.DefaultConv.Int(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoInt : convert value to Int auto
func TransformAutoInt(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Int(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilInt : convert value to Int, return error when value is nil
func TransformNotNilInt(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Int(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilInt : convert value to Int, return nil when value is nil
func TransformNilInt(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Int(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformInt8 : convert value to Int8, return default value when value is nil
func TransformInt8(value interface{}) (interface{}, error) {
	if value == nil {
		var result int8
		return result, nil
	}
	result, err := conv.DefaultConv.Int8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoInt8 : convert value to Int8 auto
func TransformAutoInt8(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Int8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilInt8 : convert value to Int8, return error when value is nil
func TransformNotNilInt8(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Int8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilInt8 : convert value to Int8, return nil when value is nil
func TransformNilInt8(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Int8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformInt16 : convert value to Int16, return default value when value is nil
func TransformInt16(value interface{}) (interface{}, error) {
	if value == nil {
		var result int16
		return result, nil
	}
	result, err := conv.DefaultConv.Int16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoInt16 : convert value to Int16 auto
func TransformAutoInt16(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Int16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilInt16 : convert value to Int16, return error when value is nil
func TransformNotNilInt16(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Int16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilInt16 : convert value to Int16, return nil when value is nil
func TransformNilInt16(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Int16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformInt32 : convert value to Int32, return default value when value is nil
func TransformInt32(value interface{}) (interface{}, error) {
	if value == nil {
		var result int32
		return result, nil
	}
	result, err := conv.DefaultConv.Int32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoInt32 : convert value to Int32 auto
func TransformAutoInt32(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Int32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilInt32 : convert value to Int32, return error when value is nil
func TransformNotNilInt32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Int32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilInt32 : convert value to Int32, return nil when value is nil
func TransformNilInt32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Int32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformInt64 : convert value to Int64, return default value when value is nil
func TransformInt64(value interface{}) (interface{}, error) {
	if value == nil {
		var result int64
		return result, nil
	}
	result, err := conv.DefaultConv.Int64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoInt64 : convert value to Int64 auto
func TransformAutoInt64(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Int64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilInt64 : convert value to Int64, return error when value is nil
func TransformNotNilInt64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Int64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilInt64 : convert value to Int64, return nil when value is nil
func TransformNilInt64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Int64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformUint : convert value to Uint, return default value when value is nil
func TransformUint(value interface{}) (interface{}, error) {
	if value == nil {
		var result uint
		return result, nil
	}
	result, err := conv.DefaultConv.Uint(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoUint : convert value to Uint auto
func TransformAutoUint(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Uint(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilUint : convert value to Uint, return error when value is nil
func TransformNotNilUint(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Uint(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilUint : convert value to Uint, return nil when value is nil
func TransformNilUint(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Uint(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformUint8 : convert value to Uint8, return default value when value is nil
func TransformUint8(value interface{}) (interface{}, error) {
	if value == nil {
		var result uint8
		return result, nil
	}
	result, err := conv.DefaultConv.Uint8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoUint8 : convert value to Uint8 auto
func TransformAutoUint8(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Uint8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilUint8 : convert value to Uint8, return error when value is nil
func TransformNotNilUint8(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Uint8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilUint8 : convert value to Uint8, return nil when value is nil
func TransformNilUint8(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Uint8(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformUint16 : convert value to Uint16, return default value when value is nil
func TransformUint16(value interface{}) (interface{}, error) {
	if value == nil {
		var result uint16
		return result, nil
	}
	result, err := conv.DefaultConv.Uint16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoUint16 : convert value to Uint16 auto
func TransformAutoUint16(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Uint16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilUint16 : convert value to Uint16, return error when value is nil
func TransformNotNilUint16(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Uint16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilUint16 : convert value to Uint16, return nil when value is nil
func TransformNilUint16(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Uint16(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformUint32 : convert value to Uint32, return default value when value is nil
func TransformUint32(value interface{}) (interface{}, error) {
	if value == nil {
		var result uint32
		return result, nil
	}
	result, err := conv.DefaultConv.Uint32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoUint32 : convert value to Uint32 auto
func TransformAutoUint32(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Uint32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilUint32 : convert value to Uint32, return error when value is nil
func TransformNotNilUint32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Uint32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilUint32 : convert value to Uint32, return nil when value is nil
func TransformNilUint32(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Uint32(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformUint64 : convert value to Uint64, return default value when value is nil
func TransformUint64(value interface{}) (interface{}, error) {
	if value == nil {
		var result uint64
		return result, nil
	}
	result, err := conv.DefaultConv.Uint64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformAutoUint64 : convert value to Uint64 auto
func TransformAutoUint64(value interface{}) (interface{}, error) {
	result, err := conv.DefaultConv.Uint64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNotNilUint64 : convert value to Uint64, return error when value is nil
func TransformNotNilUint64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, ErrTypeNotSupported
	}
	result, err := conv.DefaultConv.Uint64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TransformNilUint64 : convert value to Uint64, return nil when value is nil
func TransformNilUint64(value interface{}) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result, err := conv.DefaultConv.Uint64(value)
	if err != nil {
		return nil, err
	}
	return result, nil
}
