// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: transfer/consul (interfaces: SourceClient)

// Package testsuite is a generated GoMock package.
package testsuite

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	consul "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/consul"
)

// MockSourceClient is a mock of SourceClient interface.
type MockSourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSourceClientMockRecorder
}

// MockSourceClientMockRecorder is the mock recorder for MockSourceClient.
type MockSourceClientMockRecorder struct {
	mock *MockSourceClient
}

// NewMockSourceClient creates a new mock instance.
func NewMockSourceClient(ctrl *gomock.Controller) *MockSourceClient {
	mock := &MockSourceClient{ctrl: ctrl}
	mock.recorder = &MockSourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceClient) EXPECT() *MockSourceClientMockRecorder {
	return m.recorder
}

// CreateTempNode mocks base method.
func (m *MockSourceClient) CreateTempNode(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTempNode indicates an expected call of CreateTempNode.
func (mr *MockSourceClientMockRecorder) CreateTempNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempNode", reflect.TypeOf((*MockSourceClient)(nil).CreateTempNode), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSourceClient) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSourceClientMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSourceClient)(nil).Delete), arg0)
}

// DestroySession mocks base method.
func (m *MockSourceClient) DestroySession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySession indicates an expected call of DestroySession.
func (mr *MockSourceClientMockRecorder) DestroySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySession", reflect.TypeOf((*MockSourceClient)(nil).DestroySession), arg0)
}

// Get mocks base method.
func (m *MockSourceClient) Get(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSourceClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSourceClient)(nil).Get), arg0)
}

// GetKeys mocks base method.
func (m *MockSourceClient) GetKeys(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockSourceClientMockRecorder) GetKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockSourceClient)(nil).GetKeys), arg0)
}

// GetValues mocks base method.
func (m *MockSourceClient) GetValues(arg0 []string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", arg0)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MockSourceClientMockRecorder) GetValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockSourceClient)(nil).GetValues), arg0)
}

// KeepSession mocks base method.
func (m *MockSourceClient) KeepSession() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepSession")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepSession indicates an expected call of KeepSession.
func (mr *MockSourceClientMockRecorder) KeepSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepSession", reflect.TypeOf((*MockSourceClient)(nil).KeepSession))
}

// MonitorPath mocks base method.
func (m *MockSourceClient) MonitorPath(arg0 []string) (<-chan *consul.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorPath", arg0)
	ret0, _ := ret[0].(<-chan *consul.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorPath indicates an expected call of MonitorPath.
func (mr *MockSourceClientMockRecorder) MonitorPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorPath", reflect.TypeOf((*MockSourceClient)(nil).MonitorPath), arg0)
}

// Put mocks base method.
func (m *MockSourceClient) Put(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockSourceClientMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSourceClient)(nil).Put), arg0, arg1)
}

// SetContext mocks base method.
func (m *MockSourceClient) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockSourceClientMockRecorder) SetContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockSourceClient)(nil).SetContext), arg0)
}
