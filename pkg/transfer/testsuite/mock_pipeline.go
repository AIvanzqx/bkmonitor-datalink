// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: transfer/pipeline (interfaces: Connector,Node)

// Package testsuite is a generated GoMock package.
package testsuite

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	define "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/define"
	pipeline "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/pipeline"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// ConnectFrom mocks base method.
func (m *MockConnector) ConnectFrom(arg0 <-chan define.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectFrom indicates an expected call of ConnectFrom.
func (mr *MockConnectorMockRecorder) ConnectFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectFrom", reflect.TypeOf((*MockConnector)(nil).ConnectFrom), arg0)
}

// ConnectTo mocks base method.
func (m *MockConnector) ConnectTo(arg0 pipeline.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectTo indicates an expected call of ConnectTo.
func (mr *MockConnectorMockRecorder) ConnectTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectTo", reflect.TypeOf((*MockConnector)(nil).ConnectTo), arg0)
}

// GetOutputChan mocks base method.
func (m *MockConnector) GetOutputChan() <-chan define.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputChan")
	ret0, _ := ret[0].(<-chan define.Payload)
	return ret0
}

// GetOutputChan indicates an expected call of GetOutputChan.
func (mr *MockConnectorMockRecorder) GetOutputChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputChan", reflect.TypeOf((*MockConnector)(nil).GetOutputChan))
}

// NoCopy mocks base method.
func (m *MockConnector) NoCopy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoCopy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoCopy indicates an expected call of NoCopy.
func (mr *MockConnectorMockRecorder) NoCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoCopy", reflect.TypeOf((*MockConnector)(nil).NoCopy))
}

// Nodes mocks base method.
func (m *MockConnector) Nodes() []pipeline.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].([]pipeline.Node)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockConnectorMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockConnector)(nil).Nodes))
}

// SetNoCopy mocks base method.
func (m *MockConnector) SetNoCopy(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNoCopy", arg0)
}

// SetNoCopy indicates an expected call of SetNoCopy.
func (mr *MockConnectorMockRecorder) SetNoCopy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoCopy", reflect.TypeOf((*MockConnector)(nil).SetNoCopy), arg0)
}

// Start mocks base method.
func (m *MockConnector) Start(arg0 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockConnectorMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConnector)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockConnector) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConnectorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConnector)(nil).Stop))
}

// String mocks base method.
func (m *MockConnector) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockConnectorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockConnector)(nil).String))
}

// Wait mocks base method.
func (m *MockConnector) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockConnectorMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockConnector)(nil).Wait))
}

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// ConnectFrom mocks base method.
func (m *MockNode) ConnectFrom(arg0 <-chan define.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectFrom indicates an expected call of ConnectFrom.
func (mr *MockNodeMockRecorder) ConnectFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectFrom", reflect.TypeOf((*MockNode)(nil).ConnectFrom), arg0)
}

// ConnectTo mocks base method.
func (m *MockNode) ConnectTo(arg0 pipeline.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectTo indicates an expected call of ConnectTo.
func (mr *MockNodeMockRecorder) ConnectTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectTo", reflect.TypeOf((*MockNode)(nil).ConnectTo), arg0)
}

// GetOutputChan mocks base method.
func (m *MockNode) GetOutputChan() <-chan define.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputChan")
	ret0, _ := ret[0].(<-chan define.Payload)
	return ret0
}

// GetOutputChan indicates an expected call of GetOutputChan.
func (mr *MockNodeMockRecorder) GetOutputChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputChan", reflect.TypeOf((*MockNode)(nil).GetOutputChan))
}

// NoCopy mocks base method.
func (m *MockNode) NoCopy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoCopy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoCopy indicates an expected call of NoCopy.
func (mr *MockNodeMockRecorder) NoCopy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoCopy", reflect.TypeOf((*MockNode)(nil).NoCopy))
}

// SetNoCopy mocks base method.
func (m *MockNode) SetNoCopy(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNoCopy", arg0)
}

// SetNoCopy indicates an expected call of SetNoCopy.
func (mr *MockNodeMockRecorder) SetNoCopy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoCopy", reflect.TypeOf((*MockNode)(nil).SetNoCopy), arg0)
}

// Start mocks base method.
func (m *MockNode) Start(arg0 chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockNodeMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockNode) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode)(nil).Stop))
}

// String mocks base method.
func (m *MockNode) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockNodeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNode)(nil).String))
}

// Wait mocks base method.
func (m *MockNode) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockNodeMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockNode)(nil).Wait))
}
