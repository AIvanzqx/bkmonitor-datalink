// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package define

import (
	"context"
	"fmt"
)

// DataProcessorCreator : function to create DataProcessor
type DataProcessorCreator func(ctx context.Context, name string) (DataProcessor, error)

// mapDataProcessor : DataProcessor factory mappings
var mapDataProcessor = make(map[string]DataProcessorCreator)

// RegisterDataProcessor : register DataProcessor to factory
var RegisterDataProcessor = func(name string, fn DataProcessorCreator) {
	mapDataProcessor[name] = fn
}

// NewDataProcessor : create DataProcessor by name
var NewDataProcessor = func(ctx context.Context, name string) (DataProcessor, error) {
	fn, ok := mapDataProcessor[name]
	if !ok {
		return nil, fmt.Errorf("unknown DataProcessor %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "DataProcessor",
		Registered: func() []string {
			keys := make([]string, 0, len(mapDataProcessor))
			for key := range mapDataProcessor {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// FrontendCreator : function to create Frontend
type FrontendCreator func(ctx context.Context, name string) (Frontend, error)

// mapFrontend : Frontend factory mappings
var mapFrontend = make(map[string]FrontendCreator)

// RegisterFrontend : register Frontend to factory
var RegisterFrontend = func(name string, fn FrontendCreator) {
	mapFrontend[name] = fn
}

// NewFrontend : create Frontend by name
var NewFrontend = func(ctx context.Context, name string) (Frontend, error) {
	fn, ok := mapFrontend[name]
	if !ok {
		return nil, fmt.Errorf("unknown Frontend %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "Frontend",
		Registered: func() []string {
			keys := make([]string, 0, len(mapFrontend))
			for key := range mapFrontend {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// BackendCreator : function to create Backend
type BackendCreator func(ctx context.Context, name string) (Backend, error)

// mapBackend : Backend factory mappings
var mapBackend = make(map[string]BackendCreator)

// RegisterBackend : register Backend to factory
var RegisterBackend = func(name string, fn BackendCreator) {
	mapBackend[name] = fn
}

// NewBackend : create Backend by name
var NewBackend = func(ctx context.Context, name string) (Backend, error) {
	fn, ok := mapBackend[name]
	if !ok {
		return nil, fmt.Errorf("unknown Backend %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "Backend",
		Registered: func() []string {
			keys := make([]string, 0, len(mapBackend))
			for key := range mapBackend {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// PipelineCreator : function to create Pipeline
type PipelineCreator func(ctx context.Context, name string) (Pipeline, error)

// mapPipeline : Pipeline factory mappings
var mapPipeline = make(map[string]PipelineCreator)

// RegisterPipeline : register Pipeline to factory
var RegisterPipeline = func(name string, fn PipelineCreator) {
	mapPipeline[name] = fn
}

// NewPipeline : create Pipeline by name
var NewPipeline = func(ctx context.Context, name string) (Pipeline, error) {
	fn, ok := mapPipeline[name]
	if !ok {
		return nil, fmt.Errorf("unknown Pipeline %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "Pipeline",
		Registered: func() []string {
			keys := make([]string, 0, len(mapPipeline))
			for key := range mapPipeline {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// StoreCreator : function to create Store
type StoreCreator func(ctx context.Context, name string) (Store, error)

// mapStore : Store factory mappings
var mapStore = make(map[string]StoreCreator)

// RegisterStore : register Store to factory
var RegisterStore = func(name string, fn StoreCreator) {
	mapStore[name] = fn
}

// NewStore : create Store by name
var NewStore = func(ctx context.Context, name string) (Store, error) {
	fn, ok := mapStore[name]
	if !ok {
		return nil, fmt.Errorf("unknown Store %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "Store",
		Registered: func() []string {
			keys := make([]string, 0, len(mapStore))
			for key := range mapStore {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// SchedulerCreator : function to create Scheduler
type SchedulerCreator func(ctx context.Context, name string) (Scheduler, error)

// mapScheduler : Scheduler factory mappings
var mapScheduler = make(map[string]SchedulerCreator)

// RegisterScheduler : register Scheduler to factory
var RegisterScheduler = func(name string, fn SchedulerCreator) {
	mapScheduler[name] = fn
}

// NewScheduler : create Scheduler by name
var NewScheduler = func(ctx context.Context, name string) (Scheduler, error) {
	fn, ok := mapScheduler[name]
	if !ok {
		return nil, fmt.Errorf("unknown Scheduler %s", name)
	}
	return fn(ctx, name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "Scheduler",
		Registered: func() []string {
			keys := make([]string, 0, len(mapScheduler))
			for key := range mapScheduler {
				keys = append(keys, key)
			}
			return keys
		},
	})
}
